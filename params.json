{
  "name": "Mdl-webpack",
  "tagline": "A Google Material Design Lite project built with NPM and Webpack using SASS and EcmaScript 2015/2016",
  "body": "# MDL Webpack\r\nA [Google Material Design Lite](http://www.getmdl.io/index.html) project built with NPM and Webpack using SASS and EcmaScript 2015/2016.\r\n\r\n<img src=\"./etc/mdl-webpack.png\" style=\"width:100%; max-width: 800px; margin: 0 auto;\" />\r\n\r\nMaterial Design is a design language developed by Google. Expanding upon the \"card\" motifs \r\nthat debuted in Google Now, Material Design makes more liberal use of grid-based layouts, responsive animations and \r\ntransitions, padding, and depth effects such as lighting and shadows.\r\n\r\nMaterial Design Lite lets you add a Material Design look and feel to your websites. It doesnâ€™t rely on any JavaScript \r\nframeworks and aims to optimize for cross-device use,  and offer an experience that is immediately accessible\r\n\r\n\r\n## What is included\r\nA Material Design Lite project showcasing all components in MDL version 1.1.2. You can use SASS variables to modify all  \r\naspects of MDL - a typical use case is to configure fonts and color schemes. The project has selfhosting of font Roboto, \r\nMaterial Icons and Material Design Iconic Font - you don't need any external references in HTML. \r\n\r\nA few custom components are also hosted in this project (later they should move to their own repo).\r\n\r\n\r\n## Why\r\nMaterial Design Lite is a great SASS/CSS framework, but the pre built themes was not sufficient for my use. SASS with\r\nWebpack provides control with all aspects of MDL and makes it easy to customize the design.\r\n\r\n\r\n## Getting started\r\n* [NodeJS](https://nodejs.org/en/) version 4.x or 5.x must be installed in advance and it is assumed that you have basic knowledge of NodeJS.\r\n* Fork, clone or download ZIP\r\n* CD to project root folder\r\n* Install project dependencies: ```npm install```\r\n* Start the project in development mode: ```npm run dev```\r\n* Open a browser an hit: ```http://localhost:8080/webpack-dev-server/```\r\n* Import the project into an IDE of your choice\r\n* Open: ```./src/stylesheets/utils/_variables.scss``` \r\n* In the ```/* ==========  Color & Themes  ========== */``` section add the following code:\r\n\r\n```sass\r\n$color-primary: \"63,63,63\";\r\n$color-primary-dark: \"43,43,43\";\r\n$color-primary-contrast: \"114,160,224\";\r\n$color-accent: \"69,97,136\";\r\n$color-accent-contrast: \"255,255,255\";\r\n```\r\n* Save the modified file.\r\n* If the Webpack Dev Server is running, you will (almost) immediately see the changes in your browser.\r\n\r\n\r\n## Custom components\r\nThis project has a few custom components. \r\n\r\n\r\n### Accordion Component\r\n<img src=\"./etc/flexbox-accordion.png\" style=\"width:100%; max-width: 800px; margin: 0 auto;\" />\r\n\r\nAn accordion component is a collection of expandable panels associated with a common outer container. Panels consist of \r\na header and an associated content region or panel. The primary use of an Accordion is to present multiple sections of \r\ncontent on a single page without scrolling, where all of the sections are peers in the application or object hierarchy. \r\nThe general look is similar to a tree where each root tree node is an expandable accordion header. The user navigates \r\nand makes the contents of each panel visible (or not) by interacting with the Accordion Header.\r\n\r\nCredits: The Accordion component is based on this [CodePen](http://codepen.io/aann/pen/dPqBML)\r\n\r\n\r\n### Bordered Input Fields Theme Component\r\n<img src=\"./etc/bordered-fields-theme.png\" style=\"width:100%; max-width: 800px; margin: 0 auto;\"/>\r\n\r\nDemonstrates how you can create your own theme of MDL text fields.\r\n\r\nCredits: The Bordered Fields Theme component is based on this [CodePen](http://codepen.io/prajwal078/pen/LVJZXz)\r\n\r\n\r\n### Select Element Component\r\n<img src=\"./etc/select-element.png\" style=\"width:100%; max-width: 800px; margin: 0 auto;\" />\r\n\r\nThe HTML ```<select>``` element represents a control that presents a menu of options. MDL does not provide it's own \r\ncomponent for the ```<select>``` element.\r\n\r\nCredits: The Select component is based on the following sources:\r\n* [Material Design Lite selectfield component](https://github.com/mebibou/mdl-selectfield) \r\n* [mdl-selectfield](https://github.com/MEYVN-digital/mdl-selectfield)\r\n* [Simple Material Design Login, with select field](http://codepen.io/michaelschofield/pen/qEzWaM)\r\n* [Material Design &lt;select&gt; element, css only](http://codepen.io/pudgereyem/pen/PqBxQx)\r\n\r\n\r\n## Polyfills\r\n\r\n### Dialog Element Polyfill\r\nThis project uses the GoogleChrome [```dialog-polyfill```](https://github.com/GoogleChrome/dialog-polyfill) package.\r\nYou can find the usage instructions [here](https://github.com/GoogleChrome/dialog-polyfill#usage)\r\n\r\n### Details Element Polyfill\r\nThis project uses the [```lavu-details-polyfill```](https://github.com/leifoolsen/lavu-details-polyfill) package. \r\nYou can find the usage instructions [here](https://github.com/leifoolsen/lavu-details-polyfill#usage).\r\n\r\n\r\n##### NOTE\r\nThis project is still in it's early stages.\r\n\r\nAs part of my work I review the usability of MDL as a SASS framework for both internal and public projects. \r\nIn the coming months we plan to use MDL in some of our internal projects. At the same time, I plan to expand this \r\nproject so that it can run as part of the actual frontend project. In this way it will be easy for web designers to \r\nmake changes in design and simultaneously verify that the changes are as expected for all aspects of the design.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}